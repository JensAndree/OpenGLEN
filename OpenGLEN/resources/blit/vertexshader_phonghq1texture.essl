/* Copyright 2012 Richard Sahlin
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

 /**
 * Vertex shader for 1 texture source using Phong shading,
 * vectors calculated at each fragment position to enable
 * correct highlights on large flat surfaces.
 * @author Richard Sahlin
 */


uniform vec3 DirLight_uniform;
uniform vec4 MatDiffuse_uniform;        //The material diffuse color.
uniform vec4 MatSpecular_uniform;       //Specular material color.
uniform float Shine_uniform;            //Material shine
uniform sampler2D Texture_uniform;      //The texture sampler
uniform vec4 LightColor_uniform;
uniform vec3 LightPosition_uniform;

uniform mat4 PerspectiveMatrix_uniform;
uniform vec4 Translate_uniform;                //Translation
uniform vec4 Scale_uniform;                    //Scale
uniform vec4 Rotate_uniform;                //Euler rotation.


attribute vec3 vertex_attrib;
attribute vec3 normal_attrib;
attribute vec2 texCoords_attrib;

varying vec4 vertex_varying;
varying vec3 normal_varying;
varying vec2 vTexCoord;
varying float dotLight;

mat4 vertexTransform();                //Lib function, Transform (scale, translate and rotate) using setup uniform values

void main()
{
    vTexCoord = texCoords_attrib;
    mat4 concat = vertexTransform();
    vertex_varying = concat * vec4(vertex_attrib, 1);
    gl_Position = vertex_varying;
    normal_varying = normalize(mat3(concat) * normal_attrib);
    dotLight = dot(normal_varying, DirLight_uniform);
}